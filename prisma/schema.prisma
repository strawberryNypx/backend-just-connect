// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  name                String?   @db.VarChar(100)
  username            String    @unique @db.VarChar(20)
  email               String    @unique
  password            String    @db.VarChar(60)
  bio_description     String?   @db.VarChar(140)
  role                Role      @default(USER)
  admin_user_block    Boolean   @default(false)
  linkedin            String?   @unique //adicionada condição UNIQUE
  instagram           String?   @unique //adicionada condição UNIQUE
  github              String?   @unique //adicionada condição UNIQUE
  reset_token         String?   @unique //snake_case
  reset_token_expiry  DateTime? //snake_case
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt //Retirada da condição NOT NULL
  posts               Post[]
  comments            Comment[]
  post_reports        PostReport[]
  post_like           PostLike[]
  comment_reports     CommentReport[]
  comment_like        CommentLike[]

  @@map("users")
}

model Post {
  id                  String    @id @default(uuid())
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String
  title               String    @db.VarChar(50)
  description         String    @db.Text
  score               Int       @default(0)
  status_open         Boolean   @default(true) //snake_case
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt //Retirada da condição NOT NULL
  admin_post_block    Boolean   @default(false)
  comment             Comment[]
  tags                Tag[]
  post_reports        PostReport[]
  post_like           PostLike[]

  @@map("posts")
}

model Comment {
  id                  String    @id @default(uuid())
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String
  post                Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id             String
  comment             String    @db.Text
  score               Int       @default(0)
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt //Retirada da condição NOT NULL
  admin_comment_block Boolean   @default(false)
  comment_reports     CommentReport[]
  comment_like        CommentLike[]

  @@map("comments")
}

model Tag {
  id                  String    @id @default(uuid())
  tag                 String    @unique @db.VarChar(15)
  posts               Post[]

  @@map("tags")
}

model PostReport {
  id                  String    @id @default(uuid())
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String
  post                Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id             String
  type_report         TypeReport
  post_report         String    @db.VarChar(140)
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  admin_validation    Boolean   @default(false)

  @@map("postreport")
}

model PostLike {
  id                  String    @id @default(uuid())
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String
  post                Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id             String
  created_at          DateTime  @default(now())

  @@map("postlike")
}

model CommentReport {
  id                  String    @id @default(uuid())
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String
  comment             Comment   @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  comment_id          String
  type_report         TypeReport
  post_report         String    @db.VarChar(140)
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  admin_validation    Boolean   @default(false)

  @@map("commentreport")
}

model CommentLike {
  id                  String    @id @default(uuid())
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String
  comment             Comment   @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  comment_id          String
  created_at          DateTime  @default(now())

  @@map("commentlike")
}

enum Role {
  USER
  ADMIN
}

enum TypeReport {
  Spam
  FraudeGolpe
  ExposicaoDeViolencia
  Assedio
  NudezPornografia
  DiscursoDeOdio
  VendaDeProdutosIlicitos
}